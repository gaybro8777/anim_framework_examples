#!/usr/bin/python3
#+
# Example use of anim_framework: a combination of (not quite correct) trochoid
# curves animated in various ways. The result may be viewed here
# <https://vimeo.com/90524687>.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import time
from fractions import \
    Fraction
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Vector
from anim import \
    common

#+
# Old (incorrect) version of troch
#-

class troch_old :

    @classmethod
    def draw(celf, g, ring_radius, wheel_radius, wheel_frac, phase, nr_steps, start = 0, end = 1) :
        "draws a trochoid curve into the qahirah.Context g. ring_radius is the radius of the" \
        " stationary ring, while wheel_radius is the radius of the moving wheel; both must" \
        " be integers. frac is the fraction of the wheel radius that the actual" \
        " point on the curve is located from the centre of the wheel. nr_steps is the" \
        " number of straight-line segments to use to approximate the curve." \
        " Setting up pen size, draw pattern etc is left up to caller."
        ratio = Fraction(ring_radius, wheel_radius)
        nr_cycles = ratio.denominator # to produce one complete traversal of curve

        def curve_func(x) :
            theta_ring = qah.circle * nr_cycles * x
            theta_wheel = theta_ring * (ring_radius / wheel_radius + 1)
            wheel_pos = Vector(ring_radius, 0).rotate(theta_ring + phase * qah.circle)
              # “ring_radius” should be “ring_radius + wheel_radius” (corrected in anim.troch)
            curve_pos = wheel_pos + Vector(wheel_radius * wheel_frac, 0).rotate(theta_wheel)
            return curve_pos
        #end curve_func

        common.draw_curve(g, f = curve_func, closed = True, nr_steps = nr_steps, start = start, end = end)
    #end draw

    @classmethod
    def make_draw(celf, ring_radius, wheel_radius, wheel_frac, phase, nr_steps, start = 0, end = 1) :
        "returns a draw procedure which will draw a trochoid curve with the specified animatable" \
        " parameters."
        ring_radius = common.ensure_interpolator(ring_radius)
        wheel_radius = common.ensure_interpolator(wheel_radius)
        wheel_frac = common.ensure_interpolator(wheel_frac)
        phase = common.ensure_interpolator(phase)
        nr_steps = common.ensure_interpolator(nr_steps)
        start = common.ensure_interpolator(start)
        end = common.ensure_interpolator(end)

        def apply_draw(g, x) :
            "draws a trochoid into the qahirah.Context g with the animated settings" \
            " appropriate to time x."
            # note ring_radius, wheel_radius and nr_steps must be integers
            celf.draw \
              (
                g = g,
                ring_radius = round(ring_radius(x)),
                wheel_radius = round(wheel_radius(x)),
                wheel_frac = wheel_frac(x),
                phase = phase(x),
                nr_steps = round(nr_steps(x)),
                start = start(x),
                end = end(x)
              )
        #end apply_draw

        return \
            apply_draw
    #end make_draw

#end troch_old

#+
# Mainline
#-

drawing_size = Vector(1280, 720)
anim_duration = 20.0
frame_rate = 25
nr_steps = 2000

bg_color = Colour.from_hsva((0.144, 0.145, 1))
anim = \
    [
        common.draw_compose
          (
            common.make_draw
              (
                ("set_source_colour", (Colour.from_hsva((0.16, 0.9, 1.0)),)),
                ("set_line_width", (128,)),
                ("scale", (Vector(16 / 9, 1),)),
                ("scale", (Vector(0.8, 0.8),)),
              ),
            troch_old.make_draw
              (
                ring_radius = 360,
                wheel_radius =
                    common.transform_interpolator
                      (
                        interp = common.step_interpolator
                          (
                            x_vals = (0, 1, 2, 3, 4, 5, 6),
                            y_vals = (-120, -90, -72, 72, 90, 120)
                          ),
                        scale = anim_duration / 6,
                        offset = 0
                      ),
                wheel_frac = 0.5,
                phase = common.linear_interpolator(0, anim_duration, 0, 1),
                nr_steps = nr_steps,
              ),
          ),
        common.draw_compose
          (
            common.make_draw
              (
                (
                    "set_source_colour",
                    (
                        common.periodic_interpolator
                          (
                            interp = common.hsva_to_colour_interpolator
                              (
                                h = common.linear_interpolator(0, anim_duration / 2, 0, 1),
                                s = .5,
                                v = 1,
                                a = 1
                              ),
                            from_x = 0,
                            to_x = anim_duration / 2,
                          ),
                    ),
                ),
                ("scale", (Vector(2, 2),)),
                ("set_line_width", (1.5,)),
              ),
            troch_old.make_draw
              (
                ring_radius = 80,
                wheel_radius = common.linear_interpolator(0, anim_duration, -20, -60),
                wheel_frac = 1,
                phase = common.linear_interpolator(0, anim_duration, 0, -.25),
                nr_steps = nr_steps,
              ),
          ),
        common.draw_compose
          (
            common.make_draw
              (
                ("set_source_colour", (Colour.grey(0.5),)),
                ("set_line_width", (0.7,)),
                ("scale", (Vector(1.5, 1.5),)),
              ),
            troch_old.make_draw
              (
                ring_radius = 220,
                wheel_radius = 120,
                wheel_frac = common.linear_interpolator(0, anim_duration, 2, -2),
                phase = 0,
                nr_steps = nr_steps,
              ),
          ),
    ]

pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = drawing_size
  )
g = qah.Context.create(pix)
g.set_operator(CAIRO.OPERATOR_SOURCE)
g.translate(drawing_size / 2)
restore_matrix = g.matrix
restore_line_width = g.line_width

default_settings = common.make_draw \
  (
    ("set_matrix", (restore_matrix,)),
    ("set_source_colour", (Colour.grey(0),)),
    ("set_line_width", (restore_line_width,)),
  )
out_dir = os.path.join(os.path.dirname(sys.argv[0]), "frames")

start = time.time()
nr_frames = round(anim_duration * frame_rate)
for frame_nr in range(0, nr_frames) :
    t = frame_nr / frame_rate
    g.set_source_colour(bg_color)
    g.paint() # initialize blank canvas for new frame
    for curve in anim :
        default_settings(g, t)
        curve(g, t)
    #end for
    pix.write_to_png(os.path.join(out_dir, "{:04d}.png".format(frame_nr + 1)))
#end for
sys.stdout.write("{} frames in {:.3f}s\n".format(nr_frames, time.time() - start))
