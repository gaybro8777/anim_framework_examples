#!/usr/bin/python3
#+
# Example use of anim_framework: generating a film-leader countdown.
#
# Copyright 2015, 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import time
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Vector
from anim import \
    common

drawing_radius = 256
rel_text_size = 0.9
anim_duration = 9.0
frame_rate = 25
bg_colour = Colour.grey(0.75, 1)
fg_colour = Colour.grey(0, 1)
line_width = 10

drawing_dims = Vector(1, 1) * drawing_radius * 2

def anim_init(g) :
    global mid_y
    g.set_operator(CAIRO.OPERATOR_SOURCE)
    g.translate(drawing_dims / 2)
    g.select_font_face("sans-serif", CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_NORMAL)
    g.set_font_size(1)
    extents = g.text_extents("W")
    g.set_font_size(drawing_radius * 2 / min(extents.width, extents.height) * rel_text_size)
    extents = g.font_extents
    mid_y = (extents.ascent - extents.descent) / 2
#end anim_init

def draw_number(g, n) :
    "draws the display for specified integer number of seconds n."
    (g
        .set_source_colour(bg_colour)
        .paint()
        .set_source_colour(fg_colour)
    )
    s = "{:d}".format(n)
    g.move_to((- g.text_extents(s).x_advance / 2, mid_y))
    g.show_text(s)
#end draw_number

def draw_frame(g, t) :
    t = anim_duration - t
    frac = t - math.floor(t)
    arc_radius = 0.9 * drawing_radius
    draw_number(g, math.floor(t))
    if frac != 0 :
        # overlap appropriate fraction of display for prior whole number of seconds
        angle = (0.75 - frac) * qah.circle # 0Â° = negative y-axis
        g.save()
        (g.new_path()
            .move_to((0, 0))
            .line_to(Vector.unit(angle) * drawing_radius)
            .arc
              (
                centre = (0, 0),
                radius = arc_radius,
                angle1 = angle,
                angle2 = qah.circle * 0.75,
                negative = False
              )
            .close_path()
            .clip()
        )
        draw_number(g, math.ceil(t))
        g.restore()
        (g
            .new_path()
            .move_to(Vector.unit(angle) * drawing_radius)
            .line_to((0, 0))
            .line_to(Vector.unit(- 0.25 * qah.circle) * drawing_radius)
            .set_line_width(line_width)
            .stroke()
        )
    #end if
    (g.new_path()
        .arc
          (
            centre = (0, 0),
            radius = arc_radius,
            angle1 = 0,
            angle2 = qah.circle,
            negative = False
          )
        .set_line_width(line_width)
        .stroke()
    )
#end draw_frame

start = time.time()
frame_range = common.render_anim \
  (
    dimensions = drawing_dims,
    start_time = 0,
    end_time = anim_duration,
    frame_rate = frame_rate,
    draw_frame = draw_frame,
    overall_presetup = anim_init,
    out_dir = os.path.join(os.path.dirname(sys.argv[0]), "frames"),
    start_frame_nr = 1
  )
sys.stdout.write("{} frames in {:.3f}s\n".format(frame_range[1], time.time() - start))
