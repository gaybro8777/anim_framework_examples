#!/usr/bin/python3
#+
# Example use of anim_framework: simulate drawing a trochoid curve
# as though with a Spirograph set.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import time
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Vector
import anim_common
from anim_troch import \
    make_draw as troch

drawing_size = Vector(512, 512)
anim_duration = 5.0
frame_rate = 25
nr_steps = 1000

bg_color = Colour.from_hsva((0, 0, .9))
fg_color = Colour.from_hsva((.5, .5, .7))
scale = 20
ring_radius = 11 * scale
wheel_radius = -3 * scale
wheel_frac = 0.8
phase = 0

curve = \
    anim_common.draw_compose \
      (
        anim_common.make_draw
          (
            ("set_source_colour", (bg_color,)),
            ("paint", ()),
            ("set_source_colour", (fg_color,)),
            ("set_line_width", (4,)),
            ("transform",
                (
                    (anim_common.matrix_interpolator
                      (
                        anim_common.interpolator(lambda x : Matrix.rotate(- x / 3)),
                        anim_common.interpolator(lambda x : Matrix.scale(1 - x / 10)),
                      )
                    ),
                )
            ),
          ),
        anim_common.draw_sequence
          (
            x_vals = (anim_duration / 2,),
            draws =
                (
                    troch
                      (
                        ring_radius = ring_radius,
                        wheel_radius = wheel_radius,
                        nr_steps = nr_steps,
                        wheel_frac = wheel_frac,
                        phase = phase,
                        start = 0,
                        end = anim_common.linear_interpolator(0, anim_duration / 2, 0, 1),
                      ),
                    troch
                      (
                        ring_radius = ring_radius,
                        wheel_radius = wheel_radius,
                        wheel_frac = wheel_frac,
                        phase = phase,
                        nr_steps = nr_steps,
                        start = anim_common.linear_interpolator(0, anim_duration / 2, 0, 1),
                        end = 1,
                      ),
                )
          ),
      )

def anim_init(g) :
    g.set_operator(CAIRO.OPERATOR_SOURCE)
    g.translate(drawing_size / 2)
#end anim_init

start = time.time()
frame_range = anim_common.render_anim \
  (
    dimensions = drawing_size,
    start_time = 0,
    end_time = anim_duration,
    frame_rate = frame_rate,
    draw_frame = curve,
    overall_presetup = anim_init,
    out_dir = os.path.join(os.path.dirname(sys.argv[0]), "frames"),
    start_frame_nr = 1
  )
sys.stdout.write("%d frames in %.3fs\n" % (frame_range[1], time.time() - start))
